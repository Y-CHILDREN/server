# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs
name: Run tsc CI

on:
  push:
    branches: ['**']

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
          version: 9
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm i

      - name: Create .env.production file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env.production
          echo "ENV=production" >> .env.production
          echo "PORT=3000" >> .env.production

      - name: Check environment variables
        run: cat .env.production | grep -v "DATABASE_URL"

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Apply database migrations
        run: pnpm prisma migrate deploy

      - name: TypeScript Compilation
        run: pnpm tsc
